#+title: Adventure of Code, 2023, день 11

#+begin_src j :noweb yes :tangle day11.ijs
  <<day11:Визначення>>
#+end_src

Скрипт читається за допомогою команди [[https://code.jsoftware.com/wiki/Vocabulary/Foreigns#m0][виконання]] ~0!:1~.

#+begin_src j
  0!:1 <'day11.ijs'
#+end_src

* Читання даних

Дані читаються з вказаного файла за допомогою команди [[https://code.jsoftware.com/wiki/Vocabulary/Foreigns#m1][читання]] ~1!:1~

#+begin_src j :noweb-ref day11:Визначення
  read =: 1!:1 @ <
#+end_src

Переформатуємо результат в таблицю, для якої рядки в вихідному рядку розділяються переводом рядка
(~LF~). Знаходимо усі входження ~LF~ і розділяємо на інтервали за допомогою [[https://code.jsoftware.com/wiki/Vocabulary/semidot1#dyadic][бінарного розрізу]]
~,;._2~. Тут основним дієсловом є приєднання ~,~, яке застосовується до кожного інтервалу вихідного
рядка, при цьому інтервали визначаються переводом рядка в кінці кожного підрядка (параметр ~2~ у
розрізу), а усі переводи рядків викидаються (від'ємне значення параметра).

#+begin_src j :noweb-ref day11:Визначення
  format =: (LF&= ,;._2 ]) @ read
#+end_src

* COMMENT Вставка пустих стовпців і рядків
:PROPERTIES:
:ID:       64c22f9d-b3b2-4990-9f4b-080e97390d99
:END:

В другій частині вставляється довільна (і досить велика) кількість стовпців і рядків. Тому пряма вставка
стає неефективною. Замість цього будемо виконувати "віртуальну" вставку, маніпулюючи координатами
галактик.

Знайдемо маску для усіх позицій, де нема галактик (='#'&~:=), потім згорнемо стовпчики по "і" (~*./~), і
отримаємо одинички для стовпчиків, де немає галактик. Додаємо одиничку (~>:~), після чого отримуємо
кількість стовпчиків, які потрібно взяти для кожного стовпчика. Стовпчики, де є галактики, беруться по
одному разу, а пусті стовпчики --- по два.

#+begin_src j :noweb-ref day11:Визначення
  col_counts =: >: @ (*./ @ ('#'&~:))
#+end_src

Зберемо стовпці, обираючи потрібну їх кількість. Однак, оскільки копіювання (~#~) прикладається до
верхнього рівня, необхідно виконати його під транспонуванням матриці (~&.|:~).

#+begin_src j :noweb-ref day11:Визначення
  expand_cols =: (col_counts @ ]) #&.|: ]
#+end_src

Для рядків ми використовуємо ту ж саму функцію вставки, але виконуємо її під транспонуванням.

#+begin_src j :noweb-ref day11:Визначення
  expand_rows =: expand_cols&.|:
#+end_src

Комбінуємо вставку рядків і стовпців.

#+begin_src j :noweb-ref day11:Визначення
  expand =: expand_rows @ expand_cols
#+end_src

* Отримання позицій

Отримаємо перелік запакованих координат. Це декартовий добуток переліків індексів рядків і
стовпчиків, однак у вигляді переліку, який отримується згорткою таблиці.

#+begin_src j :noweb-ref day11:Визначення
  irows =: i.(@(0&{@$))
  icols =: i.(@(1&{@$))
  iall =: ,/ @ ({ @ (irows ; icols))
#+end_src

Створимо маску позицій галактик (у вигляді переліку) і витягнемо тільки координати галактик. Після цього
розпакуємо координати.

#+begin_src j :noweb-ref day11:Визначення
  ipos =: > @ (('#'= ,/) # iall)
#+end_src

* Зсув позицій

Отримаємо перелік пустих стовпців, як описано в [[id:64c22f9d-b3b2-4990-9f4b-080e97390d99][раніше]], однак при цьому отримуємо не кількість копій, а
лише індекси.

#+begin_src j :noweb-ref day11:Визначення
  ecols =: (*./ @ ('#'&~:)) # (i. @ #)
#+end_src

Для рядків просто обчислимо те ж саме під транспонуванням.

#+begin_src j :noweb-ref day11:Визначення
  erows =: ecols &.|:
#+end_src

Припустимо, ми маємо напрямок (рядок або стовпець) з індексом ~i~. За допомогою функції ~expand_axis~
"посунемо" цей індекс, додавши до нього кількість пустих стовпців перед ним (тобто, кількість елементів
~ecols/erows~, які менше ~i~).

Тут розмір зсуву (~1000000~) закодований, при цьому враховується, що треба не додати мільон, а
*помножити* на нього, при цьому вже існуючий пустий елемент враховується, тому коефіцієнт на ~1~ менше.

#+begin_src j :noweb-ref day11:Визначення
  shift_axis =: [ + (999999&* @ (+/ @: >))
#+end_src

Посунемо позицію, застосувавши розширення відповідних напрямків.

#+begin_src j :noweb-ref day11:Визначення
  shift_row =: (0{[) shift_axis (erows @ ])
  shift_col =: (1{[) shift_axis (ecols @ ])
  shift_pos =: shift_row , shift_col
#+end_src

Тепер посунемо усі позиції з переліку. Для цього доведеться явно вказати ранги ~shift_pos~.

#+begin_src j :noweb-ref day11:Визначення
  shifted =: ipos shift_pos"(1 _) ]
#+end_src

* Обчислення мінімальних відстаней

Функція ~dist~ знаходить відстань між двома позиціями. Для цього віднімаємо координати позицій (~-~),
знаходимо абсолютну велічину (магнітуду, ~|~) різниць і складаємо ці різниці (~+/~). При цьому, однак,
треб враховувати, що суму треба обчислювати на *всьому* векторі, для чого використовується [[https://code.jsoftware.com/wiki/Vocabulary/atco][повне
застосування]] (~@:~). 

#+begin_src j :noweb-ref day11:Визначення
  dist =: +/@:(|@-)
#+end_src

Побудуємо таблицю відстаней, при цьому враховуємо, що для обчислення відстані треба брати перелік
координат, тобто, з рангом ~1~ (~"1~). Оскільки зліва і зправа використовується один і той самий перелік,
таблицю будуємо за допомогою [[https://code.jsoftware.com/wiki/Vocabulary/tilde][рефлексії]] (=~=).

#+begin_src j :noweb-ref day11:Визначення
  dists =: dist"1/~ @ shifted
#+end_src

Знайдемо суму відстаней для всіх пар, для цього розгорнемо таблицю (~,/~) і згорнемо її для суми
(~+/~). Однак, оскільки кожна пара зустрічається двічі, результат треба зменшити вдвічі (~-:~).

Для великих значень треба підвищити точність (~x:~).

#+begin_src j :noweb-ref day11:Визначення
  sum =: (x:@(-:@(+/@,/)))@dists
#+end_src

* Остаточні дані

Для остаточного обчислення треба прочитати вихідні дані, розширити мапу і підрахувати відстані.

#+begin_src j :noweb-ref day11:Визначення
  result =: sum @ format
#+end_src

Згорнемо обчислення.

#+begin_src j :noweb-ref day11:Визначення
  result =: result f.
#+end_src

