#+title: Adventure of Code, 2023, день 12, =Rust=

Перша частина була вирішена на [[file:day12_prolog.org][Prolog]], однак друга частина працює з більшим обсягом даних, тому рішення
на =Prolog= займає надто багато часу. Вирішено другу частину написати на =Rust= з використанням того ж
самого алгоритму.

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day12_2.rs
  <<day12:Декларації>>

  <<day12:Визначення>>
  <<day12_1:Визначення>>
    
  fn main() {
      <<day12:Прочитати-дані>>
      <<day12_2:Дії>>
      println!("{}", result);
  }
#+end_src

* Читання рядків

#+begin_src rust :noweb-ref day12:Декларації
  use std::{fs, env, io::{self, BufRead}};
#+end_src

#+begin_src rust :noweb-ref day12:Прочитати-дані
  let args: Vec<String> = env::args().collect();
  let file = fs::File::open(&args[1]).unwrap();
  let lines = io::BufReader::new(file)
      .lines().map(|l| l.unwrap());
#+end_src

Рядки є незалежними, тому краще одразу опрацьовувати їх в циклі.

#+begin_src rust :noweb yes :noweb-ref day12_2:Дії
  let result: usize = lines
      .map(|line| {
          <<day12:Обробити-рядок>>
          result
      })
      .sum();
#+end_src

* Розбір рядка

Розділимо рядок на перелік /струмків/ (=spring=) і /лічильників/ (=count=).

#+begin_src rust :noweb-ref day12:Обробити-рядок
  let mut parts = line.split_whitespace();
#+end_src

Виділимо струмки.

#+begin_src rust :noweb-ref day12:Обробити-рядок
  let springs = parts.next().unwrap().to_string();
#+end_src

Розберемо лічильники, які є вектором цілих чисел, розділених комою.

#+begin_src rust :noweb-ref day12:Обробити-рядок
  let counts = parts.next().unwrap()
      .split(',')
      .map(|count| count.parse::<usize>().unwrap())
      .collect::<Vec<usize>>();
#+end_src

* Розмноження струмків
:PROPERTIES:
:ID:       af23d187-1d09-4aea-91d5-d1fa47dda5fd
:END:

Для гнучкості отримаємо коефіціент розмноження з аргументу командного рядка.

#+begin_src rust :noweb-ref day12:Обробити-рядок
  let mult = args[2].parse::<usize>().unwrap();
#+end_src

Розмножимо рядки за допомогою ланцюга ітераторів.

#+begin_src rust :noweb-ref day12:Обробити-рядок
  let mut copy = springs.clone();
  for _ in 0..(mult-1) {
      copy = copy + "?";
      copy += &springs;
  }
  let springs = copy;
#+end_src

* Розмноження лічильників

#+begin_src rust :noweb-ref day12:Обробити-рядок
  let mut copy = counts.clone();
  for _ in 0..(mult-1) {
      copy.append(&mut counts.clone());
  }
  let counts = copy;
#+end_src

* Формування шматків

Розділимо рядок струмків на шматки.

#+begin_src rust :noweb-ref day12:Обробити-рядок
  let chunks = springs
      .split('.')
      .filter(|c| *c != "")
      .map(|c| c.chars().collect::<Vec<_>>())
      .collect::<Vec<_>>();
#+end_src

* Визначення шматка
:PROPERTIES:
:ID:       7de23c20-bda9-49c1-a723-1b7d5ba01df0
:END:

#+begin_src rust :noweb yes :noweb-ref day12:Визначення
  type Chunk = Vec<char>;
#+end_src

Функція визначення шматка ~fixed~ є недетермінованою, вона має повернути вектор можливих залишків для
кожного варіанта визначення. Для ефективності повертаємо тільки індекси початку залишків. Функція є
рекурсивною.

Результат можна одразу розподілити так, щоб зарезервувати місце і уникнути затрат на динамічний
перерозподіл.

Додатково передамо глобальну таблицю кешування ~memo~.

#+begin_src rust :noweb yes :noweb-ref day12:Декларації
  use std::collections::BTreeMap;
#+end_src

#+begin_src rust :noweb yes :noweb-ref day12:Визначення
  #[contracts::debug_requires(ispring <= chunk.len())]
  #[contracts::debug_ensures(ret.iter().all(|i| *i <= chunk.len()))]
  fn fixed(chunk: &Chunk, ispring: usize, count: usize) -> Vec<usize> {
      <<day12:fixed:Дії>>
  }
#+end_src

Якщо лічильник більше довжини шматка, то визначити шматок неможливо, тому повертаємо пустий вектор.

#+begin_src rust :noweb yes :noweb-ref day12:fixed:Дії
  if count > chunk.len() - ispring {
      return Vec::with_capacity(200);
  }
#+end_src

Якщо перший струмок є ушкодженим (~#~), "відрізаємо" послідовність ушкоджених струмків. Для цього
достатньо "просунути" ~index~ на ~count~ елементів. При цьому, однак, враховуємо, що перший струмок за
відрізаним має бути невизначеним (тоді він визначається як розділюючим "робочим" струмком), або після
"просунення" ми досягаємо кінця шматка. Інакше шматок також неможливо визначити.

#+begin_src rust :noweb yes :noweb-ref day12:fixed:Дії
  if chunk[ispring] == '#' {
      let mut result = Vec::with_capacity(200);
      if ispring + count == chunk.len() {
          result.push(ispring + count);
      } else if chunk[ispring + count] == '?' {
          result.push(ispring + count + 1);
      }
      // memo.insert((chunk.to_vec(), ispring, count), result.clone());
      return result;
  }     
#+end_src

Якщо перший струмок є невизначеним (~?~), то у нас є одне рішення для ушкодженого струмка, але ми маємо
також зібрати можливі визначення, коли перший струмок є робочим, тоді пропусаємо його і викликаємо
функцію рекурсивно, після чого додаємо можливий результат для ушкодженого струмка.

#+begin_src rust :noweb yes :noweb-ref day12:fixed:Дії
  let mut result = fixed(chunk, ispring + 1, count);
  if ispring + count == chunk.len() {
      result.push(ispring + count);
  } else if chunk[ispring + count] == '?' {
      result.push(ispring + count + 1);
  }
  // memo.insert((chunk.to_vec(), ispring, count), result.clone());
  return result;
#+end_src

Протестуємо функцію.

#+begin_src rust :noweb yes :noweb-ref day12:Визначення
  #[test]
  fn test_fixed() {
      assert_eq!(fixed(&vec!['#'], 0, 1), vec![1]);
      assert_eq!(fixed(&vec!['?', '?', '?', '?', '?'], 2, 2), vec![5, 5]);
      assert_eq!(fixed(&vec!['?', '?', '#', '#', '?', '?', '?', '?', '?', '?', '?', '?', '?'], 0, 2), vec![5]);
      assert_eq!(fixed(&vec!['?', '?', '#', '#', '?', '?', '?', '?', '?', '?', '?', '?', '?'], 3, 2), vec![6]);
      assert_eq!(fixed(&vec!['?', '?', '#', '#', '?', '?', '?', '?', '?', '?', '?', '?', '?'], 1, 2), vec![5]);
      assert_eq!(fixed(&vec!['?', '?', '#', '#', '#', '?', '?', '?', '?', '?', '?', '?', '?'], 1, 2), vec![]);
      assert_eq!(fixed(&vec!['?', '?', '#', '#', '#', '?', '?', '?', '?', '?', '?', '?', '?'], 0, 6), vec![9, 8, 7]);
  }
#+end_src

* Перевірка кількості шматків

Функція-предикат ~is_total~ визначає, чи є шматок повним. Для оптимізації ми працюємо з /фрагментом/
шматка, початок якого задається ~ispirng~, і який не може бути більше 

#+begin_src rust :noweb yes :noweb-ref day12:Визначення
  #[contracts::debug_requires(ispring <= chunk.len())]
  fn is_total(chunk: &Chunk, ispring: usize) -> bool {
      chunk.iter()
          .skip(ispring)
          .all(|s| *s == '?')
  }
#+end_src

Протестуємо функцію.

#+begin_src rust :noweb yes :noweb-ref day12:Визначення
  #[test]
  fn test_is_total() {
      assert!(is_total(&vec![], 0));
      assert!(!is_total(&vec!['#'], 0));
      assert!(is_total(&vec!['?', '?', '?', '?', '?'], 0));
      assert!(!is_total(&vec!['?', '?', '#', '#', '?', '?', '?', '?', '?', '?', '?', '?', '?'], 0));
      assert!(is_total(&vec!['?', '?', '#', '#', '?', '?', '?', '?', '?', '?', '?', '?', '?'], 4));
  }
#+end_src

Послідовність шматків є можливою, якщо в ній кількість неповних шматків не більше кількості лічильників.

Тут необхідно враховувати "края". Якщо індекс шматка (~ichunk~) дорівнює довжині послідовності шматків,
то послідовність вважається пустою, тобто кількість неповних шматків дорівнює ~0~. В іншому випадку для
першого шматка береться лише завданий фрагмент, а усі інші шматки враховуються повністю.

#+begin_src rust :noweb yes :noweb-ref day12:Визначення
  #[contracts::debug_requires(ichunk <= chunks.len())]
  #[contracts::debug_requires(ichunk == chunks.len() -> ispring == 0)]
  #[contracts::debug_requires(ichunk < chunks.len() -> ispring <= chunks[ichunk].len())]
  fn is_possible(chunks: &Vec<Chunk>, ichunk: usize, ispring: usize, counts_len: usize) -> bool {
      counts_len >=
          if ichunk == chunks.len() {
              0
          } else {
              (if is_total(&chunks[ichunk], ispring) { 0 } else { 1 })
              + chunks.iter()
                  .skip(ichunk + 1)
                  .filter(|c| !is_total(c, 0))
                  .count()
          }
  }
#+end_src

Протестуємо функцію.

#+begin_src rust :noweb yes :noweb-ref day12:Визначення
  #[test]
  fn test_is_possible() {
      assert!(is_possible(&vec![
          vec!['#'], vec!['#'], vec!['#', '#', '#'],
          vec!['?'], vec!['#'], vec!['#'], vec!['#', '#', '#']
      ], 0, 0, 6));
      assert!(!is_possible(&vec![
          vec!['#'], vec!['#'], vec!['#', '#', '#'],
          vec!['#'], vec!['#'], vec!['#'], vec!['#', '#', '#']
      ], 0, 0, 6));
      assert!(is_possible(&vec![
          vec!['#'], vec!['#'], vec!['#', '#', '#'],
          vec!['#'], vec!['#'], vec!['#'], vec!['#', '#', '#']
      ], 0, 1, 6));
      assert!(is_possible(&vec![
          vec!['#'], vec!['#'], vec!['#', '#', '#'],
          vec!['#'], vec!['#'], vec!['#'], vec!['#', '#', '#']
      ], 1, 0, 6));
      assert!(is_possible(&vec![
          vec!['#'], vec!['#'], vec!['#', '#', '#'],
          vec!['#'], vec!['#'], vec!['#'], vec!['#', '#', '#']
      ], 1, 1, 5));
  }
#+end_src

* Перевірка рядка

Функція ~solutions~ перевіряє рядок, повертаючі кількість його можливих визначень. Ця функція є
рекурсивною. Додатково використовуємо кеш (=memoizing=) для ефективного зберігання вже обчислених
результатів.

#+begin_src rust :noweb yes :noweb-ref day12:Визначення
  type Memo = BTreeMap<(usize, usize, usize), usize>;

  #[contracts::debug_requires(ichunk <= chunks.len())]
  #[contracts::debug_requires(ichunk == chunks.len() -> ispring == 0)]
  #[contracts::debug_requires(ichunk < chunks.len() -> ispring <= chunks[ichunk].len())]
  #[contracts::debug_requires(icount <= counts.len())]
  fn solutions(memo: &mut Memo, chunks: &Vec<Chunk>, ichunk: usize, ispring: usize, counts: &Vec<usize>, icount: usize) -> usize {
      if let Some(result) = memo.get(&(ichunk, ispring, icount)) {
          return *result;
      }
      <<day12:solutions:Дії>>
  }
#+end_src

Визначимо, чи є пустими переліки шматків і лічильників, і перевіримо усі варіанти завершення.

#+begin_src rust :noweb yes :noweb-ref day12:solutions:Дії
  let chunks_is_empty = ichunk == chunks.len();
  let counts_is_empty = icount == counts.len();
#+end_src

Якщо обидві послідовності пусті, то знайдено одне рішення.

#+begin_src rust :noweb yes :noweb-ref day12:solutions:Дії
  if chunks_is_empty && counts_is_empty {
      memo.insert((ichunk, ispring, icount), 1);
      return 1;
  }
#+end_src

Якщо послідовність шматків пуста, а послідовність лічильників не пуста, то рішень не існує.

#+begin_src rust :noweb yes :noweb-ref day12:solutions:Дії
  if chunks_is_empty && !counts_is_empty {
      memo.insert((ichunk, ispring, icount), 0);
      return 0;
  }
#+end_src

Якщо, навпаки, послідовність шматків не пуста, а послідовність лічильників пуста, то рішення існує,
тільки якщо усі шматки є загальними. При цьому треба врахувати, що для першого шматка береться лише
фрагмент.

#+begin_src rust :noweb yes :noweb-ref day12:solutions:Дії
  if !chunks_is_empty &&
      counts_is_empty {
          let result = if is_total(&chunks[ichunk], ispring)
              && chunks.iter().skip(ichunk + 1).all(|c| is_total(c, 0)) { 1 } else { 0 };
          memo.insert((ichunk, ispring, icount), result);
          return result;
      }
#+end_src

Після цього в послідовності шматків є щонайменше один шматок, а в послідовності лічильників ---
щонайменше один лічильник.

#+begin_src rust :noweb yes :noweb-ref day12:Декларації
  use all_asserts::assert_lt;
#+end_src

#+begin_src rust :noweb yes :noweb-ref day12:solutions:Дії
  all_asserts::debug_assert_lt!(ichunk, chunks.len());
  all_asserts::debug_assert_lt!(icount, counts.len());
#+end_src

Якщо послідовність не є можливою, рішень не існує.

#+begin_src rust :noweb yes :noweb-ref day12:solutions:Дії
  if !is_possible(chunks, ichunk, ispring, counts.len() -  icount) {
      memo.insert((ichunk, ispring, icount), 0);
      return 0;
  }
#+end_src

Для першого шматка в послідовності перебираємо усі форми визначення, після чого використовуємо залишок
для подальшого пошуку рішень. Єдиним винятком є варіант, коли залишок є пустим, тоді ми відкидаємо шматок
і аналізуємо решту послідовності. У будь-якому випадку поточний лічильник викидається, як використаний.

До результату також треба додати варіант, коли поточний шматок є загальним, а отже, може бути відкинутий
для подальшого перебору.

#+begin_src rust :noweb yes :noweb-ref day12:solutions:Дії
  let result = fixed(&chunks[ichunk], ispring, counts[icount]).iter()
      .map(|irest| {
          if *irest == chunks[ichunk].len() {
              solutions(memo, chunks, ichunk + 1, 0, counts, icount + 1)
          } else {
              solutions(memo, chunks, ichunk, *irest, counts, icount + 1)
          }
      })
      .sum::<usize>()
      + (if is_total(&chunks[ichunk], ispring) { solutions(memo, chunks, ichunk + 1, 0, counts, icount) } else { 0 });
  memo.insert((ichunk, ispring, icount), result);
  result
#+end_src

Протестуємо функцію.

#+begin_src rust :noweb yes :noweb-ref day12:Визначення
  #[test]
  fn test_solutions() {
      let mut memo = Memo::new();
      assert_eq!(solutions(&mut memo, &vec![
          vec!['?', '?', '?']
      ], 0, 0, &vec![1, 1], 0), 1);

      let mut memo = Memo::new();
      assert_eq!(solutions(&mut memo, &vec![
          vec!['?', '?', '?'], vec!['#', '#', '#']
      ], 0, 0, &vec![1, 1, 3], 0), 1);

      let mut memo = Memo::new();
      assert_eq!(solutions(&mut memo, &vec![vec!['#']], 0, 0, &vec![1], 0), 1);
      let mut memo = Memo::new();
      assert_eq!(solutions(&mut memo, &vec![
          vec!['#'], vec!['#'], vec!['#', '#', '#']
      ], 0, 0, &vec![1, 1, 3], 0), 1);
  }
#+end_src

* Головний виклик

#+begin_src rust :noweb-ref day12:Обробити-рядок
  let mut memo = Memo::new();
  let result = solutions(&mut memo, &chunks, 0, 0, &counts, 0);
#+end_src

* COMMENT Перевірка рядка
:PROPERTIES:
:ID:       6448c409-6bce-46a3-80eb-93aaa6c9225b
:END:

Функція ~proper~ перевіряє рядок. Однак, це не логічна перевірка, оскільки в подальшому нам потрібно буде
підраховувати кількість варіантів. Замість цього функція повертає кількість можливих варіантів. Для
/правильного/ /визначеного/ рядка (в якому усі символи визначені) це буде ~1~, оскільки виходить рівно
один варіант. Для /неправильного/ /визначеного/ рядка це буде ~0~.

Додатковим параметром функції є /режим/ (=mode=), який може бути або /робочим/ (=operational=), або
режимом /ушкодження/ (=damage=). Для простоти ми не вводимо окремого типу для режиму, а позначуємо режими
літерами крапки (~.~) для робочого режиму та хеша (~#~) для режима ушкодження.

Для ефективності ми передаємо вектори, а не ітератори, а індексуємо їх числами. До того, відділяємо
ведучий струмок.

#+begin_src rust :noweb yes :noweb-ref day12:Визначення
  fn proper(mode: char, lead: char, springs: &[char], si: usize, counts: &Vec<usize>, progress: &mut usize, solution: &String) -> usize {
      <<day12:proper:Дії>>
  }
#+end_src

Початковим є робочий режим.

#+begin_src rust :noweb-ref day12:Обробити-рядок
  let mut progress = 0;
  let solution = String::new();
  let result = proper('.', springs[0], &springs, 1, &counts, &mut progress, &solution);
#+end_src

Зробимо режим змінним.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Дії
  let mut mode = mode;
#+end_src

Зробимо змінну копію переліку лічильників.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Дії
  let mut counts = counts.clone();
#+end_src

Перебираємо струмки, поки вони відповідають правилам, або поки їх перелік не закінчиться.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Дії
  let mut solution = solution.clone();
  let mut lead = lead;
  let mut si = si;
  loop {
      <<day12:proper:Обробити-струмок>>
      if si == springs.len() { break; }
      lead = springs[si];
      si += 1;
  }
#+end_src

Вважається, що після цього перелік струмків є пустим, інакше він не є правильним, і функція поверне нуль
раніше. Результат визначається режимом та станом переліку лічильників. В робочому режимі перелік
лічильників також має бути пустим, в режимі ушкодження перелік лічильників має містити лише один нуль.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Дії
  if mode == '.' {
      if counts.is_empty() {
          ,*progress += 1;
          if *progress % 1000000 == 0 { println!("progress: {} {}", progress, solution); }
          1
      } else {
          0
      }
  } else {
      if counts.len() == 1 && counts[0] == 0 {
          ,*progress += 1;
          if *progress % 1000000 == 0 { println!("progress: {} {}", progress, solution); }
          1
      } else {
          0
      }
  }
#+end_src

** Обробка струмку

Якщо струмок не є визначеним (~?~), то треба викликати функцію рекусивно двічі, для робочого і
ушкодженого струмка и повернути суму результатів, ігноруючи будь-яку іншу обробку.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Обробити-струмок
  if lead == '?' {
      return proper(mode, '.', &springs, si, &counts, progress, &solution)
          + proper(mode, '#', &springs, si, &counts, progress, &solution);
  }
#+end_src

Обробка струмка залежить від комбінації режиму та поточного струмка.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Обробити-струмок
  solution.push(lead);
  match (mode, lead) {
      ('.', '.') => {
          <<day12:proper:Обробити-робочий-струмок-в-робочому-режимі>>
      },
      ('.', '#') => {
          <<day12:proper:Обробити-ушкоджений-струмок-в-робочому-режимі>>
      },
      ('#', '.') => {
          <<day12:proper:Обробити-робочий-струмок-в-режимі-ушкодження>>
      },
      ('#', '#') => {
          <<day12:proper:Обробити-ушкоджений-струмок-в-режимі-ушкодження>>
      },
      c => { panic!("Invalid combination {:?}", c); }
  }
#+end_src

В робочому режимі робочий струмок пропускається.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Обробити-робочий-струмок-в-робочому-режимі
  /* nothing */
#+end_src

Ушкоджений струмок можливий, тільки якщо поточний лічильник більше ~0~, інакше увесь рядок є неправильним.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Обробити-ушкоджений-струмок-в-робочому-режимі
  if counts.is_empty() || counts[0] == 0 { return 0; }
#+end_src

Якщо це не так, то обробник:

- зменшує поточний лічильник на одиницю;
- переходить режим ушкодження.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Обробити-ушкоджений-струмок-в-робочому-режимі
  counts[0] -= 1;
  mode = '#';
#+end_src

В режимі ушкодження робочий струмок може виникнути, тільки якщо поточний лічильник дорівнює нулю, інакше
увесь рядок є неправильним.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Обробити-робочий-струмок-в-режимі-ушкодження
  if counts.is_empty() || counts[0] > 0 { return 0; }
#+end_src

Якщо це не так, то обробник:

- просуває поточний лічильник;
- переходить в робочий режим.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Обробити-робочий-струмок-в-режимі-ушкодження
  counts.remove(0);
  mode = '.';
#+end_src

Ушкоджений струмок в ушкодженому режимі можливий, тільки якщо поточний лічильник більше ~0~, інакше увесь
рядок є неправильним.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Обробити-ушкоджений-струмок-в-режимі-ушкодження
  if counts.is_empty() || counts[0] == 0 { return 0; }
#+end_src

Якщо це не так, то обробник зменшує поточний лічильник на одиницю.

#+begin_src rust :noweb yes :noweb-ref day12:proper:Обробити-ушкоджений-струмок-в-режимі-ушкодження
  counts[0] -= 1;
#+end_src

