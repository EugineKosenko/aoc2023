#+title: Adventure of Code, 2023, день 17, =Rust=

Після серії невдалих спроб рішення було повністю переглянуто з застосуванням неочевидних еврістік. При
пошуку не знаходиться оптимальний шлях, замість цього кожна позиція дошки оцінюється як вага найкоротшого
шляжу від початку до цієї позиції. При цьому позиція включає не тільки пункт, але й ще два параметри,
напрямок, з якого шлях входить до цього пункту та кількість ланок до наступного повороту.

* Частина 1
:PROPERTIES:
:ID:       e6284851-b1c1-4e8f-a3f9-42ba60af32da
:END:

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day17_1.rs
  <<day17:Декларації>>

  <<day17:Визначення>>

  fn main() {
      <<day17:Прочитати-дані>>
      <<day17_1:Дії>>
      println!("{:?}", result);
  }
#+end_src

* Читання даних

#+begin_src rust :noweb-ref day17:Декларації
  use std::{fs, env, io::{self, BufRead}};
#+end_src

#+begin_src rust :noweb-ref day17:Прочитати-дані
  let args: Vec<String> = env::args().collect();
  let file = fs::File::open(&args[1]).unwrap();
  let lines = io::BufReader::new(file)
      .lines().map(|l| l.unwrap());
#+end_src

Створимо дошку.

#+begin_src rust :noweb-ref day17:Декларації
  use grid::Grid;
#+end_src

#+begin_src rust :noweb-ref day17:Визначення
  type Board = Grid<usize>;
#+end_src

#+begin_src rust :noweb-ref day17:Прочитати-дані
  let mut board = Board::new(0, 0);
  for line in lines {
      let mut row = Vec::new();
      for c in line.chars() {
          row.push(c.to_digit(10).unwrap() as usize);
      }
      board.push_row(row);
  }
  let (rows, cols) = (board.rows(), board.cols());
  println!("{:#?}", board);
#+end_src

* Пункти

Для простоти кодуємо пункт парою з номерів рядка і стовпця.

#+begin_src rust :noweb-ref day17:Визначення
  type Point = (usize, usize);
#+end_src

* Напрямки

Визначимо напрямки за сторонами світу.

#+begin_src rust :noweb-ref day17:Визначення
  #[derive(enum_iterator::Sequence, PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug)]
  enum Dir { North, East, South, West }
#+end_src

* Оцінка
:PROPERTIES:
:ID:       03d51558-bee2-481e-b081-773aa0173b96
:END:

/Оцінка/ (=score=) визначає "вартість" позиції з точки зору пошуку оптимального шляху. Кожна позиція
включає пункт, напрямок, з якого шлях в нього заходить і кількість ланок до наступного повороту.

#+begin_src rust :noweb-ref day17:Визначення
  type Pos = (Point, Dir, usize);
#+end_src

Оцінки зберігаються в двійковій мапі.

#+begin_src rust :noweb-ref day17:Декларації
  use std::collections::BTreeMap;
#+end_src

#+begin_src rust :noweb-ref day17:Визначення
  type Scores = BTreeMap<Pos, usize>;
#+end_src

* Перелік позицій
:PROPERTIES:
:ID:       0bde7df4-ef4f-4e5d-89f0-67d6feefc1a2
:END:

Під час перебору береться чергова позиція, з якої отримується декілька сусідніх позицій, які потім знов
додаються в чергу. Для оптимізації використаємо еврістику і упорядкуємо позиції за "вагою", яка
складається з двох компонентів:

- відстань від кінцевого пункту;
- [[id:03d51558-bee2-481e-b081-773aa0173b96][оцінка]] позиції.

Найбільш простою є впорядкування черги у вигляді двійкової множини. Варіант з [[https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html][двійковою купою]] не виглядає
більш ефективним, оскільки позиції все одно треба вилучати з купи, а це вимагає такої ж складності, як і
для множини.

Для використання двійкової множини елемент має бути впорядкований повністю, тому прі однаковій вазі ми
використовуємо природню впорядкованість позицій.

#+begin_src rust :noweb-ref day17:Декларації
  use std::collections::BTreeSet;
#+end_src

#+begin_src rust :noweb-ref day17:Визначення
  type Poss = BTreeSet<(usize, usize, Pos)>;
#+end_src

* Пошук

Спочатку перелік оцінок позицій є пустим, і ми вважаємо, що усі позиції неявно мають максимально можливу
оцінку ~usize::MAX~.
#+begin_src rust :noweb-ref day17_1:Дії
  let mut scores = Scores::new();
#+end_src

Перелік позицій спочатку містить тільки початкову позицію. Тут напрямок не має значення і вказаний тільки
для визначеності.

#+begin_src rust :noweb-ref day17_1:Дії
  let mut poss = Poss::new();
  poss.insert(((rows - 1) + (cols - 1), *board.get(0, 0).unwrap(), ((0, 0), Dir::East, 3)));
#+end_src

Встановимо /межу/ (=limit=) як поточну найменшу довжину шляху. Спочатку це ~usize::MAX~, але кожного
разу, коли ми знаходимо повний шлях, знижуємо межу. Усі позиції, де оцінка не менше межі, відкидаємо.

#+begin_src rust :noweb-ref day17_1:Дії
  let mut limit = usize::MAX;
#+end_src

Цикл пошуку продовжується до тих пір, поки перелік позицій не пустий, а в кінці результатом є поточне
значення межі.

#+begin_src rust :noweb yes :noweb-ref day17_1:Дії
  while let Some((dist, score, pos)) = poss.pop_first() {
      <<day17_1:Обробити-позицію>>
  }
  let result = limit;
#+end_src

Для кінцевої позиції коригуємо межу.

#+begin_src rust :noweb-ref day17_1:Обробити-позицію
  if dist == 0 {
      limit = limit.min(score);
      println!("{}", limit);
      continue;
  }
#+end_src

Якщо оцінка позиції не менше межі, пропускаємо її.

#+begin_src rust :noweb-ref day17_1:Обробити-позицію
  if score >= limit { continue; }
#+end_src

Якщо оцінка позиції менше збереженої, коригуємо збережену оцінку, інакше пропускаємо позицію.

#+begin_src rust :noweb-ref day17_1:Обробити-позицію
  if score < *scores.get(&pos).unwrap_or(&usize::MAX) {
      scores.insert(pos, score);
  } else {
      continue;
  }
#+end_src

Розберемо позицію.

#+begin_src rust :noweb yes :noweb-ref day17_1:Обробити-позицію
  let (point, dir, count) = pos;
#+end_src

Перебираємо усі можливі напрямки в поточній позиції.

#+begin_src rust :noweb yes :noweb-ref day17_1:Обробити-позицію
  for next_dir in enum_iterator::all::<Dir>() {
      <<day17_1:Обробити-напрямок>>
  }
#+end_src

Якщо кількість ланок вичерпана, а новий напрямок співпадає з напрямком позиції, пропускаємо новий
напрямок.

#+begin_src rust :noweb yes :noweb-ref day17_1:Обробити-напрямок
  if count == 0 && next_dir == dir { continue; }
#+end_src

Обчислюємо новий пункт.

#+begin_src rust :noweb yes :noweb-ref day17_1:Обробити-напрямок
  let point = match dir {
      Dir::North => if point.0 == 0 { continue } else { (point.0 - 1, point.1) },
      Dir::East => if point.1 == cols - 1 { continue } else { (point.0, point.1 + 1) },
      Dir::South => if point.0 == rows - 1 { continue } else { (point.0 + 1, point.1) },
      Dir::West => if point.1 == 0 { continue } else { (point.0, point.1 - 1) }
  };
#+end_src

Нова кількість ланок зменшується на ~1~, якщо новий напрямок співпадає з напрямком позиції, або
скидається до ~2~ в іншому випадку.

#+begin_src rust :noweb yes :noweb-ref day17_1:Обробити-напрямок
  let count = if next_dir == dir { count - 1 } else { 2 };
#+end_src

Обчислимо нову відстань та оцінку.

#+begin_src rust :noweb yes :noweb-ref day17_1:Обробити-напрямок
  let dist = (rows - 1 - point.0) + (cols - 1 - point.1);
  let score = score + board.get(point.0, point.1).unwrap();
#+end_src

Додаємо нову позицію в перелік.

#+begin_src rust :noweb yes :noweb-ref day17_1:Обробити-напрямок
  poss.insert((dist, score, (point, next_dir, count)));
#+end_src
