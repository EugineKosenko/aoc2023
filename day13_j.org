#+title: Adventure of Code, 2023, день 13

#+begin_src j :noweb yes :tangle day13.ijs
  <<day13:Визначення>>
#+end_src

Скрипт читається за допомогою команди [[https://code.jsoftware.com/wiki/Vocabulary/Foreigns#m0][виконання]] ~0!:1~.

#+begin_src j
  0!:1 <'day13.ijs'
#+end_src

* Читання даних

Дані читаються з вказаного файла за допомогою команди [[https://code.jsoftware.com/wiki/Vocabulary/Foreigns#m1][читання]] ~1!:1~

#+begin_src j :noweb-ref day13:Визначення
  read =: 1!:1 @ <
#+end_src

Сформуємо перелік /зразків/ (=patterns=). Кожний зразок запаковується, оскільки його форма може
відрізнятися від форми інших зразків.

Зразки поділяються двома переводами рядка (~LF,LF~), при цьому, однак, відкидаєтся лише одна літера, в
результаті у всіх зразків, крім першого, попереду з'являється паразитний ~LF~. Тому додаємо до початку
аргумента ще один "паразитний" ~LF~, а після розділу відкинемо першу літеру в кожному зразку. Крім того,
щоб коректно сформувати останній зразок, необхідно також додати ще один ~LF~ в кінці аргумента (для
простоти вважаємо, що початковий рядок завжди закінчується одним ~LF~).

#+begin_src j :noweb-ref day13:Визначення
  align =: ,&LF @ (LF&, @ read)
  frets =: (LF,LF)&E.
  patterns =: (frets (<@}.);._2 ]) @ align f.
#+end_src

Зразок також вимагає форматування, але він має правильну прямокутну форму, тому його можна не
запаковувати. Однак, оскільки поділ також відбувається за ~LF~, необхідно додати ще один ~LF~ в кінець
рядка.

#+begin_src j :noweb-ref day13:Визначення
  align =: ,&LF
  frets =:  LF&E.
  format =: (frets ,;._2 ]) @ align f.
#+end_src

* Обробка зразка зліва

Функція ~is_proper~ перевіряє зразок по рядкам. Зразок правильний, якщо в ньому парна кількість рядків
(~-:@(2&|)@#~), а сама таблиця є симетричною по вертикалі (~-:|.~).

#+begin_src j :noweb-ref day13:Визначення
  is_proper =: -.@(2&|)@# *. (-: |.)
#+end_src

При обробці зліва треба перевірити на правильність усі суфікси (~\.~) зразка, знайдемо індекс першого
правильного суфікса (~{.@I.~). При цьому, однак, треба враховувати варіант, коли жоден з суфіксів не є
правильним, тоді перелік індексів є пустим, а його "першим" елементом є нуль, що співпадає з нульовим
індексом для першого правильного суфікса. Щоб уникнути цього, додамо до переліку індексів довжину самого
суфікса (~{.@(I.,#)~), таким чином у випадку, коли жоден суфікс не є правильним, ми вважаємо що
правильним є "пустий" зразок.

#+begin_src j :noweb-ref day13:Визначення
  left_proper =: ({.@(I.,#)) @ (is_proper\.) f.
#+end_src

При перевірці треба обчислити трохи незвичну формулу ~y + (x - y) % 2~, де ~y~ --- індекс суфікса, а ~x~
--- розмір зразка. Цю формулу зручно оформити за допомогою [[https://code.jsoftware.com/wiki/Vocabulary/ampdot][виконання під функцією]] (~&.~) ~-&y~, яка
спочатку віднімає від лівого аргумента правий, ділить результат на ~2~ (~%&2~), а потім застосовує
функцію, зворотню до ~-&y~. Однак, така формулу дуже важко (чи навіть неможливо) записати в неявній формі
(за допомогою "поїзду" дієслів). Тому визначимо її явно.

Додатково визначимо результат по модулю ~y~, щоб, коли правильних суфіксів нема, повертався ~0~.

#+begin_src j :noweb-ref day13:Визначення
  eval =: 4 : '((y&|)@((%&2)&.(-&y))) x'
  left_count =: left_proper eval # f.
#+end_src

Тепер визначимо лічильники для стовпців, транспонувавши зразок, і скомпонуємо результати. Для
відлагодження ми залишаємо лічильники у вигляді переліку, який просумуєму вже при виводі результата.

#+begin_src j :noweb-ref day13:Визначення
  left_counts =: ((100&*) @ left_count) , (left_count @ |:) f.
#+end_src

* Обробка зразка справа

Обробка справа виконується майже також, однак, з наступними особливостями:

- перевіряються префікси (~\~) зразка;
- для обробки відсутності правильного префікса спереду індексів додаємо ~0~;
- обираємо останній правильний префікс;
- лічильник просто ділимо пополам.

#+begin_src j :noweb-ref day13:Визначення
  right_proper =: {: @ (0&,) @: >: @ I. @ (is_proper\) f.
  right_count =: (%&2) @ right_proper
  right_counts =: ((100&*) @ right_count) , (right_count @ |:) f.
#+end_src

* Обробка переліку зразків

Об'єднаємо ліві та праві лічильники в один перелік.

#+begin_src j :noweb-ref day13:Визначення
  counts =: left_counts , right_counts f.
#+end_src

В результаті читання даних отримаємо перелік зразків. Кожен зразок розпаковуємо, форматуємо та
підраховуємо лічильники зліва і справа. В кінці сумуємо значення усіх лічильників.

#+begin_src j :noweb-ref day13:Визначення
  part1 =: +/@(+/@:(counts@format@>)@:patterns) f.
#+end_src

* Перетворення зразка на логічний

В другій частині треба вміти "інвертувати" окремі елементи, тому краще представляти їх не літерами, а
логічними значеннями.

#+begin_src j :noweb-ref day13:Визначення
  format =: '#'&= @ (frets ,;._2 ]) @ align f.
#+end_src

* Виправлення зразка

Для заданого зразка та запакованої пари координат змінимо відповідний елемент зразка на
протилежний. Встановимо правий ранг в ~0~, оскільки дієслово застосовується до атомарних пар координат.

#+begin_src j :noweb-ref day13:Визначення
  fix =: (4 : '(-. y { x) y } x')"(_ 0)
#+end_src

Переберемо усі пари координат зразка.

#+begin_src j :noweb-ref day13:Визначення
  irows =: i.@(0&{)
  icols =: i.@(1&{)
  indices =: ,/ @ (irows (<@,)"0/ icols) @ $
#+end_src

* Лічильники для виправлених зразків

Отримаємо перелік виправлених зразків за допомогою хука ~fix inidces~ і перетворюємо його на перелік
лічильників. Тут додатково завдаємо ранг ~counts~, щоб він обробляв конкретні зразки.

#+begin_src j :noweb-ref day13:Визначення
  fix_counts =: counts @ fix indices
#+end_src

Функція ~suppress~ порівнює початковий і виправлений набір лічильників. Позиції, де лічильники
початкового набору співпадають з лічильниками виправленого набору (=~:=), перетворюються на нуль
домноженням на значення виправленого набору лічильників.

Ця функція має ранг ~1~ для обох аргументів.

#+begin_src j :noweb-ref day13:Визначення
  suppress =: (]*~:)"1
#+end_src

За допомогою функціі ~filter~ відкинемо усі "нульові" лічильники (~(0 0 0 0 & -:)"1~) і візьмемо першу
комбінацію (~{.~) від переліку (~#~).

#+begin_src j :noweb-ref day13:Визначення
  filter =: {. @ (-. @ (0 0 0 0&-:)"1 @ ] # ]) @: (counts suppress fix_counts) f.
#+end_src

Остаточно просумуємо усі лічильники.

#+begin_src j :noweb-ref day13:Визначення
  part2 =: +/@(+/@:(filter@format@>)@:patterns) f.
#+end_src

